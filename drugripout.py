# -*- coding: utf-8 -*-
"""DRUGRIPOUT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bnbLLUfcoRTlzhpQqnqAu6Ef8pJQYMWA
"""

s!python -m pip install paddlepaddle -i https://pypi.tuna.tsinghua.edu.cn/simple
# Install paddle OCR
!pip install paddleocr
# Clone paddle OCR repo - get FONTS for visualization
!git clone https://github.com/PaddlePaddle/PaddleOCR

from paddleocr import PaddleOCR, draw_ocr # main OCR dependencies
import cv2 #opencv
import os # folder directory navigation

# Setup model for OCR
ocr_model = PaddleOCR(lang='en')
img_path = os.path.join('.','DRUG.png')
result = ocr_model.ocr(img_path)
result

def flatten_list(nested_list):
    flattened_list = []
    for item in nested_list:
        if isinstance(item, list):
            flattened_list.extend(flatten_list(item))
        else:
            flattened_list.append(item)
    return flattened_list

#nested list
nested_list = [result]

# nested list ot list
flattened_list = flatten_list(nested_list)
# print(flattened_list)

# Convert list to string
my_string = str(flattened_list)
# print(my_string)

# Only the text is given as a context for the model input  using "regex"

import re
text = my_string
context = re.findall(r"\('(.*?)', [0-9.]+\)", text)
context = " ".join(context)
print(context)



import transformers
from transformers import pipeline

# Load pre-trained BERT QA model
model_name = "bert-large-uncased-whole-word-masking-finetuned-squad"
qa_pipeline = pipeline("question-answering", model=model_name)


# Define multiple questions
questions = [
    # "what is the name of the tablets 1 ?",
    # "what is the name of the tablets 2 ?",
    # "what is the name of the tablets 3 ?",
    # "What is the name of the tab 4 ?"
    # "What is the age of the patient ?",
    # "what is the ID of the patient ?",
    # "What is the name of the doctor?",
    # "what is the chief complaints?",
    # "waht is the advice?",
    # "what is the disease diagnosed ?",
    # "what is the date?",
    # "what is the follow up date ?",
    # "what is the height of the patient?",
    # "what is the weight of the patient?",
    # "what is the bp?",
    # "what is B M I?",
    # "what is the name of the hospital",
    # "what is the address of the hospital",
    # "what is the timing of the hospital",
    # "on which day its closed"
    # "what is the count of tab and cap listed",
    "Can you list all the tab names?"
]


# Iterate through questions and get extracted spans
for question in questions:
    res = qa_pipeline({'context': context, 'question': question})
    print(f"Question: {question}")
    print(f"Extracted Answer: {res['answer']}\n")